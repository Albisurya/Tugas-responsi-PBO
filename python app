import tkinter as tk
from tkinter import ttk, messagebox
import mysql.connector
from datetime import datetime

# Fungsi untuk membuat koneksi ke database MySQL
def create_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="retail_app"
    )

# Fungsi untuk menambahkan produk ke database
def add_product():
    name = entry_product_name.get()
    price = entry_product_price.get()

    if name and price:
        connection = create_connection()
        cursor = connection.cursor()

        query = "INSERT INTO produk (nama_produk, harga_produk) VALUES (%s, %s)"
        cursor.execute(query, (name, price))
        connection.commit()

        cursor.close()
        connection.close()

        messagebox.showinfo("Sukses", "Produk berhasil ditambahkan!")
        clear_product_fields()
        show_products()
    else:
        messagebox.showwarning("Kesalahan Input", "Harap isi semua kolom produk.")

# Fungsi untuk menampilkan daftar produk
def show_products():
    connection = create_connection()
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM produk")
    products = cursor.fetchall()

    for row in product_listbox.get_children():
        product_listbox.delete(row)

    for row in products:
        product_listbox.insert("", "end", values=(row[0], row[1], row[2]))

    cursor.close()
    connection.close()

# Fungsi untuk menghapus produk yang dipilih
def delete_product():
    selected_item = product_listbox.selection()
    if selected_item:
        product = product_listbox.item(selected_item, "values")
        product_id = product[0]

        connection = create_connection()
        cursor = connection.cursor()

        query = "DELETE FROM produk WHERE id_produk = %s"
        cursor.execute(query, (product_id,))
        connection.commit()

        cursor.close()
        connection.close()

        messagebox.showinfo("Sukses", "Produk berhasil dihapus!")
        show_products()
    else:
        messagebox.showwarning("Kesalahan Pilihan", "Pilih produk yang ingin dihapus.")

# Fungsi untuk mencatat transaksi
def add_transaction():
    selected_item = combo_product.current()
    quantity = entry_quantity.get()

    if selected_item >= 0 and quantity:
        product = combo_product['values'][selected_item]
        product_id = product_ids[selected_item]
        price = float(product.split(" - ")[1])
        total_price = price * int(quantity)
        transaction_date = datetime.now().strftime("%Y-%m-%d")

        connection = create_connection()
        cursor = connection.cursor()

        query = """
        INSERT INTO transaksi (id_produk, jumlah_produk, total_harga, tanggal_transaksi)
        VALUES (%s, %s, %s, %s)
        """
        cursor.execute(query, (product_id, quantity, total_price, transaction_date))
        connection.commit()

        cursor.close()
        connection.close()

        messagebox.showinfo("Sukses", "Transaksi berhasil dicatat!")
        clear_transaction_fields()
        show_transactions()
    else:
        messagebox.showwarning("Kesalahan Input", "Harap pilih produk dan isi jumlah.")

# Fungsi untuk menampilkan daftar transaksi
def show_transactions():
    connection = create_connection()
    cursor = connection.cursor()
    query = """
    SELECT t.id_transaksi, p.nama_produk, t.jumlah_produk, t.total_harga, t.tanggal_transaksi 
    FROM transaksi t 
    JOIN produk p ON t.id_produk = p.id_produk
    """
    cursor.execute(query)
    transactions = cursor.fetchall()

    for row in transaction_listbox.get_children():
        transaction_listbox.delete(row)

    for row in transactions:
        transaction_listbox.insert("", "end", values=(row[0], row[1], row[2], row[3], row[4]))

    cursor.close()
    connection.close()

# Fungsi untuk mengosongkan kolom input produk
def clear_product_fields():
    entry_product_name.delete(0, tk.END)
    entry_product_price.delete(0, tk.END)

# Fungsi untuk mengosongkan kolom input transaksi
def clear_transaction_fields():
    combo_product.set("")
    entry_quantity.delete(0, tk.END)

# Membuat GUI aplikasi
def create_gui():
    global entry_product_name, entry_product_price, product_listbox
    global combo_product, entry_quantity, transaction_listbox, product_ids

    root = tk.Tk()
    root.title("Aplikasi Manajemen Produk dan Transaksi")
    root.geometry("1000x700")
    root.configure(bg="#f8f9fa")

    style = ttk.Style()
    style.theme_use("clam")
    style.configure("Treeview", font=("Arial", 11), rowheight=25)
    style.configure("Treeview.Heading", font=("Arial", 12, "bold"))

    # Frame Produk
    product_frame = tk.LabelFrame(root, text="Manajemen Produk", font=("Arial", 14), bg="#ffffff")
    product_frame.pack(padx=10, pady=10, fill="x")

    tk.Label(product_frame, text="Nama Produk:", font=("Arial", 12), bg="#ffffff").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    entry_product_name = tk.Entry(product_frame, font=("Arial", 12))
    entry_product_name.grid(row=0, column=1, padx=10, pady=5)

    tk.Label(product_frame, text="Harga Produk:", font=("Arial", 12), bg="#ffffff").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    entry_product_price = tk.Entry(product_frame, font=("Arial", 12))
    entry_product_price.grid(row=1, column=1, padx=10, pady=5)

    ttk.Button(product_frame, text="Tambah Produk", command=add_product).grid(row=2, column=1, padx=10, pady=10, sticky="e")

    product_listbox = ttk.Treeview(product_frame, columns=("ID", "Nama", "Harga"), show="headings")
    product_listbox.heading("ID", text="ID")
    product_listbox.heading("Nama", text="Nama Produk")
    product_listbox.heading("Harga", text="Harga")
    product_listbox.pack(padx=10, pady=10, fill="x")

    ttk.Button(product_frame, text="Hapus Produk", command=delete_product).pack(padx=10, pady=5, anchor="e")

    # Frame Transaksi
    transaction_frame = tk.LabelFrame(root, text="Proses Transaksi", font=("Arial", 14), bg="#ffffff")
    transaction_frame.pack(padx=10, pady=10, fill="x")

    tk.Label(transaction_frame, text="Pilih Produk:", font=("Arial", 12), bg="#ffffff").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    combo_product = ttk.Combobox(transaction_frame, font=("Arial", 12), state="readonly")
    combo_product.grid(row=0, column=1, padx=10, pady=5)

    tk.Label(transaction_frame, text="Jumlah:", font=("Arial", 12), bg="#ffffff").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    entry_quantity = tk.Entry(transaction_frame, font=("Arial", 12))
    entry_quantity.grid(row=1, column=1, padx=10, pady=5)

    ttk.Button(transaction_frame, text="Tambah Transaksi", command=add_transaction).grid(row=2, column=1, padx=10, pady=10, sticky="e")

    transaction_listbox = ttk.Treeview(transaction_frame, columns=("ID", "Produk", "Jumlah", "Total", "Tanggal"), show="headings")
    transaction_listbox.heading("ID", text="ID")
    transaction_listbox.heading("Produk", text="Nama Produk")
    transaction_listbox.heading("Jumlah", text="Jumlah")
    transaction_listbox.heading("Total", text="Total Harga")
    transaction_listbox.heading("Tanggal", text="Tanggal")
    transaction_listbox.pack(padx=10, pady=10, fill="x")

    def load_products():
        connection = create_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, price FROM products")
        products = cursor.fetchall()

        global product_ids
        product_ids = [p[0] for p in products]
        combo_product["values"] = [f"{p[1]} - {p[2]}" for p in products]

        cursor.close()
        connection.close()

    load_products()
    show_products()
    show_transactions()

    root.mainloop()

if __name__ == "__main__":
    create_gui()
